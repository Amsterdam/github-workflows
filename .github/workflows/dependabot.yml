name: Opdrachten Team Dependabot

on:
  workflow_call:
    inputs:
      slack_channel:
        description: 'Slack channel'
        type: string
        required: true
      timetell:
        description: 'Timetell project id'
        type: number
      acceptance_pipeline:
        description: 'Acceptance pipeline'
        type: string
      production_pipeline:
        description: 'Production pipeline'
        type: string
      acceptance_urls:
        description: 'Acceptance urls'
        type: array
      production_urls:
        description: 'Production urls'
        type: array

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    steps:
    - name: Login to GitHub Container Registry
      uses: amsterdam/opdrachten-team-github-workflows/ghcr-login@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.repository.default_branch }}

    - name: Update dependencies file
      run: make requirements

    - name: Docker build and push to GHCR
      uses: amsterdam/opdrachten-team-github-workflows/build-and-push@v1

    - name: Run Tests
      run: make test

    - name: Construct and print variables
      id: variables
      run: | 
        echo "today=$(date +'%Y-%m-%d')" >>  $GITHUB_ENV
        echo "title='Maintenance run ${{ env.today }}'" >> $GITHUB_ENV
        git fetch --tags
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
        echo "latest_tag=$latest_tag" >> $GITHUB_ENV
        next_tag=$(echo $latest_tag | awk -F. -v OFS=. '{$NF = $NF + 1;} 1')
        echo "next_tag=$next_tag" >> $GITHUB_ENV
        echo "next_tag=$next_tag"
        echo "release_url=${{ github.event.repository.html_url }}/releases/new?tag=${{ env.next_tag }};title=${{ env.title }}" >> $GITHUB_ENV
        
        # print 
        echo "Today is ${{ env.today }}"
        echo "Title is ${{ env.title }}"
        echo "Latest tag is ${{ env.latest_tag }}"
        echo "Next tag is ${{ env.next_tag }}"
        echo "Release url is ${{ env.release_url }}"

    - name: Create Pull Request
      id: cpr
      uses: peter-evans/create-pull-request@v5
      with:
        title: ${{ env.title }}
        labels: Opdrachten Team Dependabot
        body: |
          Auto generated PR to update dependencies.
          This PR is generated by the Opdrachten Team Dependabot
        branch: dependabot/${{ env.today }}
        committer: Opdrachten Team Dependabot <opdrachten-team-dependabot@amsterdam.nl>
        commit-message: ${{ env.title }}

    - name: Print output
      run: |
        echo "1. Review Pull Request ${{ steps.cpr.outputs.pull-request-url }} :eyes:"
        echo "2. Release Naar Acceptatie (merge naar master) ${{ steps.cpr.outputs.pull-request-url }} :twisted_rightwards_arrows:"
        if [ -n "${{ inputs.acceptance_pipeline }}" ]; then
          echo "3. Controleer Acceptatie Deployment Job ${{ inputs.acceptance_pipeline }} :jenkins-acc:"
        fi
        if [ -n "${{ inputs.acceptance_urls }}" ]; then
          echo "4. Controleer Acceptatie ${{ inputs.acceptance_urls }} :release-acc:"
        fi
        echo "5. Release Naar Productie (tag versie) ${{ env.release_url }} :label:"
        
        if [ -n "${{ inputs.production_pipeline }}" ]; then
          echo "6. Controleer Productie Deployment Job ${{ inputs.production_pipeline }} :jenkins_ci:"
        fi
        if [ -n "${{ inputs.production_urls }}" ]; then
          echo "7. Controleer Productie ${{ inputs.production_urls }} :rocket:"
        fi
        if [ -n "${{ inputs.timetell }}" ]; then
          echo "8. Timetell code: ${{ inputs.timetell }} :clock1:"
        fi

#    - uses: someimportantcompany/github-actions-slack-message@v1
#      with:
#        channel: ${{ inputs.slack_channel }}
#        bot-token:  ${{ secrets.SLACK_BOT_TOKEN }}
#        text: Firing a bot-token message from Github Actions

#      - name: Run Python Script
#        id: python_script
#        run: python my_script.py
#        env:
#          INPUT_PARAM1: ${{ github.event.inputs.param1 }}
#          INPUT_PARAM2: ${{ github.event.inputs.param2 }}
#
#      echo "Store: ${{ github.event.inputs.myInput }}"
#      INPUT_STORE=${{ github.event.inputs.myInput }} python3 test.py