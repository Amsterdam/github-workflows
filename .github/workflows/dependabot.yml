name: Opdrachten Team Dependabot

on:
  workflow_call:
    inputs:
      slack_channel:
        description: 'Slack channel'
        type: string
        required: true
      timetell:
        description: 'Timetell project id'
        type: number
      acceptance_pipeline:
        description: 'Acceptance pipeline'
        type: string
      production_pipeline:
        description: 'Production pipeline'
        type: string
      acceptance_urls:
        description: 'Acceptance urls'
        type: string
      production_urls:
        description: 'Production urls'
        type: string

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    environment: dependabot
    steps:
    - name: Login to GitHub Container Registry
      uses: amsterdam/opdrachten-team-github-workflows/ghcr-login@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.repository.default_branch }}

#    - name: Update dependencies file
#      run: make requirements
#
#    - name: Docker build and push to GHCR
#      uses: amsterdam/opdrachten-team-github-workflows/build-and-push@v1
#
#    - name: Run Tests
#      run: make test

    - name: Construct variables
      id: variables
      run: | 
        today=$(date +'%Y-%m-%d')
        title="Maintenance run $today"
        title_html=$(echo $title | sed 's/ /%20/g')
        git fetch --tags
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
        next_tag=$(echo $latest_tag | awk -F. -v OFS=. '{$NF = $NF + 1;} 1')
        
        echo "today=$(date +'%Y-%m-%d')" >>  $GITHUB_OUTPUT
        echo "title=$title" >> $GITHUB_OUTPUT
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
        echo "next_tag=$next_tag" >> $GITHUB_OUTPUT
        echo "release_url=${{ github.event.repository.html_url }}/releases/new?tag=$next_tag&title=$title_html" >> $GITHUB_OUTPUT
        
    - name: Print variables
      run: |
        echo "Today is ${{ steps.variables.outputs.today }}"
        echo "Title is ${{ steps.variables.outputs.title }}"
        echo "Latest tag is ${{ steps.variables.outputs.latest_tag }}"
        echo "Next tag is ${{ steps.variables.outputs.next_tag }}"
        echo "Release url is ${{ steps.variables.outputs.release_url }}"

    - name: Create Pull Request
      id: cpr
      uses: peter-evans/create-pull-request@v5
      with:
        title: ${{ steps.variables.outputs.title }}
        labels: Opdrachten Team Dependabot
        body: |
          Auto generated PR to update dependencies.
          This PR is generated by the Opdrachten Team Dependabot
        branch: dependabot/${{ steps.variables.outputs.today }}
        committer: Opdrachten Team Dependabot <opdrachten-team-dependabot@amsterdam.nl>
        commit-message: ${{ steps.variables.outputs.title }}

    - name: Check if SLACK_TOKEN exists
      env:
        slack_token: ${{ secrets.SLACK_TOKEN }}
      if: ${{ env.slack_token == '' }}
      run: |
        echo "The secret \"SLACK_TOKEN\" has not been created; please go to \"settings > secrets > actions\" to create it"
        exit 1

    - name: Write message to slack
      uses: amsterdam/opdrachten-team-github-workflows/slack-message@v1
      with:
        slack-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: ${{ inputs.slack_channel }}
        message: No major upgrades found
        pull-request-url: ${{ steps.cpr.outputs.pull-request-url }}
        acceptance-pipeline: ${{ inputs.acceptance_pipeline }}
        production-pipeline: ${{ inputs.production_pipeline }}
        acceptance-urls: ${{ inputs.acceptance_urls }}
        production-urls: ${{ inputs.production_urls }}
        timetell-code: ${{ inputs.timetell_code }}
        release-url: ${{ steps.variables.outputs.release_url }}
        repository: ${{ github.event.repository.name }}

    - name: Send Slack Message
      uses: archive/github-actions-slack@master
      id: send-message
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: ${{ inputs.slack_channel }}
        slack-optional-username: ${{ github.event.repository.name }}
        slack-text: No major upgrades

    - name: Send "Slack Message" Result
      shell: bash
      id: send-result
      run: |
        echo "Data - ${{ steps.send-message.outputs.slack-result }}"
        echo "thread_ts=${{ fromJson(steps.send-message.outputs.slack-result).response.message.ts }}" >> $GITHUB_OUTPUT

    - name: Thread message 1
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: ${{ inputs.slack_channel }}
        slack-optional-thread_ts: ${{ steps.send-result.outputs.thread_ts }}
        slack-optional-username: 1. Review Pull Request
        slack-text: "URL: ${{ steps.cpr.outputs.pull-request-url }}"
        slack-optional-icon_emoji: ":eyes:"

    - name: Thread message 2
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: ${{ inputs.slack_channel }}
        slack-optional-thread_ts: ${{ steps.send-result.outputs.thread_ts }}
        slack-optional-username: 2. Release Naar Acceptatie (merge naar master)
        slack-text: "URL: ${{ steps.cpr.outputs.pull-request-url }}"
        slack-optional-icon_emoji: ":twisted_rightwards_arrows:"

    - name: Thread message 3
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: ${{ inputs.slack_channel }}
        slack-optional-thread_ts: ${{ steps.send-result.outputs.thread_ts }}
        slack-optional-username: 3. Controleer Acceptatie Deployment Job
        slack-text: "URL: ${{ inputs.acceptance_pipeline }}"
        slack-optional-icon_emoji: ":jenkins-acc:"

    - name: Thread message 4
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: ${{ inputs.slack_channel }}
        slack-optional-thread_ts: ${{ steps.send-result.outputs.thread_ts }}
        slack-optional-username: 4. Controleer Acceptatie
        slack-text: "URL: ${{ inputs.acceptance_urls }}"
        slack-optional-icon_emoji: ":release-acc:"

    - name: Thread message 5
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: ${{ inputs.slack_channel }}
        slack-optional-thread_ts: ${{ steps.send-result.outputs.thread_ts }}
        slack-optional-username: 5. Release Naar Productie (tag versie)
        slack-text: "URL: ${{ steps.variables.outputs.release_url }}"
        slack-optional-icon_emoji: ":label:"

    - name: Thread message 6
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: ${{ inputs.slack_channel }}
        slack-optional-thread_ts: ${{ steps.send-result.outputs.thread_ts }}
        slack-optional-username: 6. Controleer Productie Deployment Job
        slack-text: "URL: ${{ inputs.production_pipeline }}"
        slack-optional-icon_emoji: ":jenkins_ci:"

    - name: Thread message 7
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: ${{ inputs.slack_channel }}
        slack-optional-thread_ts: ${{ steps.send-result.outputs.thread_ts }}
        slack-optional-username: 7. Controleer Productie
        slack-text: "URL: ${{ inputs.production_urls }}"
        slack-optional-icon_emoji: ":rocket:"

    - name: Thread message 8
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: ${{ inputs.slack_channel }}
        slack-optional-thread_ts: ${{ steps.send-result.outputs.thread_ts }}
        slack-optional-username: 8. Timetell code
        slack-text: "Code: ${{ inputs.timetell }}"
        slack-optional-icon_emoji: ":clock1:"
